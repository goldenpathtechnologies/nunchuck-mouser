name: Build

on:
  push:
    branches:
      - main
      - dev
    paths-ignore:
      - README.md
      - CHANGELOG.md
      - LICENSE
      - .gitignore
    tags-ignore:
      - "**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{secrets.GH_TOKEN}}
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache PlatformIO
        uses: actions/cache@v2
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Run PlatformIO
        run: pio run -e adafruit_trinket_m0
        env:
          PLATFORMIO_BUILD_FLAGS: -D USB_HID

  version:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{secrets.GH_TOKEN}}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
      - name: Generate semantic-release configuration
        run: |
          cat << EOF > .releaserc
          {
            "branches": [
              "main",
              {
                "name": "dev",
                "prerelease": true
              }
            ],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              "@semantic-release/git"
            ],
            "preset": "conventionalcommits",
            "parserOpts": {
              "noteKeywords": ["BREAKING CHANGE", "BREAKING CHANGES", "BREAKING"]
            },
            "writerOpts": {
              "commitsSort": ["subject", "scope"]
            },
            "message": "chore(release): \${nextRelease.version}\\n\\n\${nextRelease.notes}"
          }
          EOF
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{secrets.GH_TOKEN}}
        run: |
          npx \
          -p @semantic-release/git \
          -p @semantic-release/commit-analyzer \
          -p @semantic-release/release-notes-generator \
          -p @semantic-release/changelog \
          -p conventional-changelog-conventionalcommits \
          semantic-release